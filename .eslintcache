[{"C:\\Users\\User\\Desktop\\projects\\drag-and-drop\\src\\App.js":"1"},{"size":3693,"mtime":1608192606662,"results":"2","hashOfConfig":"3"},{"filePath":"4","messages":"5","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"6"},"43d7c7","C:\\Users\\User\\Desktop\\projects\\drag-and-drop\\src\\App.js",["7"],"import \"./App.css\";\nimport React, { useState, useEffect, useRef } from \"react\";\n\nfunction App() {\n  const figuresList = {\n    circle: {\n      color: \"red\",\n      borderRadius: \"50%\",\n      width: 60,\n      height: 60,\n      border: \"1px solid black\",\n    },\n    rectangle: {\n      color: \"blueviolet\",\n      borderRadius: \"0%\",\n      width: 90,\n      height: 50,\n      border: \"1px solid black\",\n    },\n  };\n\n  const [canvasCoordinates, setCanvasCoordinates] = useState();\n  const ref = useRef(null);\n\n  useEffect(() => {\n    const newCanvasCoordinates = ref.current.getBoundingClientRect();\n    setCanvasCoordinates(newCanvasCoordinates);\n    //console.log(\"fieldCanvas\", ref.current.getBoundingClientRect());\n  }, []);\n\n  const [figures, setFigures] = useState([]);\n\n  const getStyleForFigure = (dataFigure, index) => {\n    let { pageX, pageY, type } = dataFigure;\n\n    //console.log(\"pagex\", pageX);\n    const figure = figuresList[type];\n    //console.log(\"a\", pageX + figure.width);\n    //console.log(\"b\", canvasCoordinates.x + canvasCoordinates.width);\n    if (pageX < canvasCoordinates.x) pageX = canvasCoordinates.x;\n    if (pageY < canvasCoordinates.y) {\n      pageY = canvasCoordinates.y;\n      //console.log(\"newpageY\", pageY);\n    }\n\n    if (pageX + figure.width > canvasCoordinates.x + canvasCoordinates.width) {\n      pageX = canvasCoordinates.x + canvasCoordinates.width - figure.width;\n      //console.log(\"new pageX\", pageX);\n    }\n    if (\n      pageY + figure.height >\n      canvasCoordinates.y + canvasCoordinates.height\n    ) {\n      pageY = canvasCoordinates.y + canvasCoordinates.height - figure.height;\n    }\n    //console.log(\"figure\", figure);\n    return {\n      width: figure.width + \"px\",\n      height: figure.height + \"px\",\n      border: figure.border,\n      backgroundColor: figure.color,\n      borderRadius: figure.borderRadius,\n      left: pageX,\n      top: pageY,\n      position: \"absolute\",\n      zIndex: index,\n    };\n  };\n\n  \n  const dragStartHandler = (e, typeFigure) => {\n    e.dataTransfer.setData(\"type\", typeFigure);\n    console.log(\"drag\", typeFigure);\n  };\n\n  const dragOverHandler = (e) => {\n    e.preventDefault();\n  };\n\n  const dragDropHandler = (e) => {\n    const type = e.dataTransfer.getData(\"type\");\n    const figure = figuresList[type];\n    const pageX = e.pageX;\n    const pageY = e.pageY;\n    //console.log(\"width\", e);\n    const dataFigure = {\n      pageX: pageX, //- (figure.width / 2)\n      pageY: pageY, //  - (figure.height / 2)\n      type: type,\n    };\n    setFigures([...figures, dataFigure]);\n    //console.log(\"type\", figures);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"figures_container\">\n        <div className=\"figures_header\">Figures</div>\n        <div className=\"figures\">\n          <div\n            className=\"circle\"\n            onDragStart={(e) => dragStartHandler(e, \"circle\")}\n            draggable\n          ></div>\n          <div\n            className=\"rectangle\"\n            onDragStart={(e) => dragStartHandler(e, \"rectangle\")}\n            draggable\n          ></div>\n        </div>\n      </div>\n      <div className=\"canvas_container\">\n        <div className=\"canvas_header\">Canvas</div>\n\n        <div\n          className=\"canvas\"\n          ref={ref}\n          onDragOver={(e) => dragOverHandler(e)}\n          onDrop={(e) => dragDropHandler(e)}\n        ></div>\n      </div>\n      {figures.map((figure, index) => {\n        return (\n          <div\n            key={index}\n            style={getStyleForFigure(figure, index)}\n            onDragOver={(e) => dragOverHandler(e)}\n            onDrop={(e) => dragDropHandler(e)}\n          />\n        );\n      })}\n    </div>\n  );\n}\n\nexport default App;\n",{"ruleId":"8","severity":1,"message":"9","line":82,"column":11,"nodeType":"10","messageId":"11","endLine":82,"endColumn":17},"no-unused-vars","'figure' is assigned a value but never used.","Identifier","unusedVar"]