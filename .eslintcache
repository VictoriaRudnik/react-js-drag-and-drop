[{"C:\\Users\\User\\Desktop\\projects\\drag-and-drop\\src\\App.js":"1"},{"size":5094,"mtime":1608283695926,"results":"2","hashOfConfig":"3"},{"filePath":"4","messages":"5","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"6"},"43d7c7","C:\\Users\\User\\Desktop\\projects\\drag-and-drop\\src\\App.js",["7","8","9"],"import \"./App.css\";\nimport React, { useState, useEffect, useRef, useCallback } from \"react\";\n\nfunction App() {\n  const figuresList = {\n    circle: {\n      color: \"red\",\n      borderRadius: \"50%\",\n      width: 60,\n      height: 60,\n      border: \"1px solid black\",\n    },\n    rectangle: {\n      color: \"blueviolet\",\n      borderRadius: \"0%\",\n      width: 90,\n      height: 50,\n      border: \"1px solid black\",\n    },\n  };\n\n  const [figures, setFigures] = useState([]);\n  const [idFigure, setIdFigure] = useState(0);\n  const [zIndex, setZIndex] = useState(0);\n  const [selectedFigure, setSelectedFigure] = useState();\n  const [canvasCoordinates, setCanvasCoordinates] = useState();\n\n  const ref = useRef(null);\n  useEffect(() => {\n    const newCanvasCoordinates = ref.current.getBoundingClientRect();\n    setCanvasCoordinates(newCanvasCoordinates);\n  }, []);\n\n  useEffect(() => {\n    document.addEventListener(\"keydown\", deleteFigure, false);\n    return () => {\n      document.removeEventListener(\"keydown\", deleteFigure, false);\n    };\n  }, [selectedFigure, figures]);\n\n  const getStyleForFigure = (dataFigure, index) => {\n    let { pageX, pageY, type, zIndex } = dataFigure;\n    const figure = figuresList[type];\n\n    if (pageX < canvasCoordinates.x) pageX = canvasCoordinates.x;\n    if (pageY < canvasCoordinates.y) {\n      pageY = canvasCoordinates.y;\n    }\n    if (pageX + figure.width > canvasCoordinates.x + canvasCoordinates.width) {\n      pageX = canvasCoordinates.x + canvasCoordinates.width - figure.width;\n    }\n    if (\n      pageY + figure.height >\n      canvasCoordinates.y + canvasCoordinates.height\n    ) {\n      pageY =\n        canvasCoordinates.y + canvasCoordinates.height - figure.height - 1;\n    }\n    let border = figure.border;\n    if (selectedFigure) {\n      border =\n        dataFigure.id === selectedFigure.id\n          ? \"1px solid yellow\"\n          : figure.border;\n    }\n    return {\n      width: figure.width + \"px\",\n      height: figure.height + \"px\",\n      border: border,\n      backgroundColor: figure.color,\n      borderRadius: figure.borderRadius,\n      left: pageX,\n      top: pageY,\n      position: \"absolute\",\n      zIndex: zIndex,\n    };\n  };\n\n  const dragStartHandler = (e, typeFigure, idFigure) => {\n    e.dataTransfer.setData(\"type\", typeFigure);\n    if (idFigure !== undefined) {\n      e.dataTransfer.setData(\"id\", idFigure);\n      e.target.style.border = \"1px solid yellow\";\n    }\n  };\n\n  const dragOverHandler = (e) => {\n    e.preventDefault();\n  };\n\n  const dragEndHandler = (e) => {\n    e.target.style.border = \"1px solid black\";\n  };\n\n  const dragDropHandler = (e) => {\n    const type = e.dataTransfer.getData(\"type\");\n    const id = e.dataTransfer.getData(\"id\")\n      ? e.dataTransfer.getData(\"id\")\n      : null;\n    const figure = figuresList[type];\n    let pageX = e.pageX;\n    let pageY = e.pageY;\n\n    const dataFigure = {\n      id: idFigure,\n      pageX: pageX, //- (figure.width / 2)\n      pageY: pageY, //  - (figure.height / 2)\n      type: type,\n      zIndex: zIndex,\n    };\n    if (id) {\n      figures.forEach((item, index) => {\n        if (item.id == id) {\n          figures.splice(index, 1);\n        }\n      });\n    }\n    setFigures([...figures, dataFigure]);\n    setIdFigure(idFigure + 1);\n    setZIndex(zIndex + 1);\n  };\n\n  const clickHandler = (e, figure) => {\n    e.target.style.zIndex = zIndex;\n    setZIndex(zIndex + 1);\n    setSelectedFigure(figure);\n  };\n\n  const deleteFigure = useCallback(\n    (event) => {\n      if (selectedFigure) {\n        const idSelectedFigure = selectedFigure.id;\n        if (event.keyCode === 46) {\n          setFigures(\n            figures.filter((figure) => figure.id !== idSelectedFigure)\n          );\n        }\n      }\n    },\n    [selectedFigure, figures]\n  );\n\n  return (\n    <div className=\"App\">\n      <div className=\"figures_container\">\n        <div className=\"figures_header\">Figures</div>\n        <div className=\"figures\">\n          <div\n            className=\"circle\"\n            onDragStart={(e) => dragStartHandler(e, \"circle\")}\n            draggable\n          ></div>\n          <div\n            className=\"rectangle\"\n            onDragStart={(e) => dragStartHandler(e, \"rectangle\")}\n            draggable\n          ></div>\n        </div>\n      </div>\n      <div className=\"canvas_container\">\n        <div className=\"canvas_header\">Canvas</div>\n\n        <div\n          className=\"canvas\"\n          ref={ref}\n          onDragOver={(e) => dragOverHandler(e)}\n          onDrop={(e) => dragDropHandler(e)}\n        ></div>\n      </div>\n      {figures.map((figure, index) => {\n        return (\n          <div\n            className=\"figure\"\n            onDragOver={(e) => dragOverHandler(e)}\n            onDrop={(e) => dragDropHandler(e)}\n            key={index}\n            style={getStyleForFigure(figure, index)}\n            onDragStart={(e) => dragStartHandler(e, figure.type, figure.id)}\n            onDragEnd={(e) => dragEndHandler(e)}\n            onClick={(e) => clickHandler(e, figure)}\n            draggable\n          ></div>\n        );\n      })}\n    </div>\n  );\n}\n\nexport default App;\n",{"ruleId":"10","severity":1,"message":"11","line":39,"column":6,"nodeType":"12","endLine":39,"endColumn":31,"suggestions":"13"},{"ruleId":"14","severity":1,"message":"15","line":100,"column":11,"nodeType":"16","messageId":"17","endLine":100,"endColumn":17},{"ruleId":"18","severity":1,"message":"19","line":113,"column":21,"nodeType":"20","messageId":"21","endLine":113,"endColumn":23},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'deleteFigure'. Either include it or remove the dependency array.","ArrayExpression",["22"],"no-unused-vars","'figure' is assigned a value but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",{"desc":"23","fix":"24"},"Update the dependencies array to be: [selectedFigure, figures, deleteFigure]",{"range":"25","text":"26"},[1040,1065],"[selectedFigure, figures, deleteFigure]"]